{"version":3,"names":[],"mappings":"","sources":["js/main.js"],"sourcesContent":["jQuery(function() {\r\n    $('body').scrollspy({target: '.content-scrollspy-nav'});\r\n\r\n    $('.popover-dismiss').popover({\r\n        trigger: 'focus'\r\n    });\r\n\r\n    jQuery(document).ready(function($){\r\n        //check if the .cd-image-container is in the viewport\r\n        //if yes, animate it\r\n        checkPosition($('.cd-image-container'));\r\n        $(window).on('scroll', function(){\r\n            checkPosition($('.cd-image-container'));\r\n        });\r\n\r\n        //make the .cd-handle element draggable and modify .cd-resize-img width according to its position\r\n        $('.cd-image-container').each(function(){\r\n            var actual = $(this);\r\n            drags(actual.find('.cd-handle'), actual.find('.cd-resize-img'), actual, actual.find('.cd-image-label[data-type=\"original\"]'), actual.find('.cd-image-label[data-type=\"modified\"]'));\r\n        });\r\n\r\n        //upadate images label visibility\r\n        $(window).on('resize', function(){\r\n            $('.cd-image-container').each(function(){\r\n                var actual = $(this);\r\n                updateLabel(actual.find('.cd-image-label[data-type=\"modified\"]'), actual.find('.cd-resize-img'), 'left');\r\n                updateLabel(actual.find('.cd-image-label[data-type=\"original\"]'), actual.find('.cd-resize-img'), 'right');\r\n            });\r\n        });\r\n    });\r\n\r\n    function checkPosition(container) {\r\n        container.each(function(){\r\n            var actualContainer = $(this);\r\n            if( $(window).scrollTop() + $(window).height()*0.5 > actualContainer.offset().top) {\r\n                actualContainer.addClass('is-visible');\r\n            }\r\n        });\r\n    }\r\n\r\n    function drags(dragElement, resizeElement, container, labelContainer, labelResizeElement) {\r\n        dragElement.on(\"mousedown vmousedown\", function(e) {\r\n            dragElement.addClass('draggable');\r\n            resizeElement.addClass('resizable');\r\n\r\n            var dragWidth = dragElement.outerWidth(),\r\n                xPosition = dragElement.offset().left + dragWidth - e.pageX,\r\n                containerOffset = container.offset().left,\r\n                containerWidth = container.outerWidth(),\r\n                minLeft = containerOffset + 10,\r\n                maxLeft = containerOffset + containerWidth - dragWidth - 10;\r\n\r\n            dragElement.parents().on(\"mousemove vmousemove\", function(e) {\r\n                leftValue = e.pageX + xPosition - dragWidth;\r\n\r\n                //constrain the draggable element to move inside his container\r\n                if(leftValue < minLeft ) {\r\n                    leftValue = minLeft;\r\n                } else if ( leftValue > maxLeft) {\r\n                    leftValue = maxLeft;\r\n                }\r\n\r\n                widthValue = (leftValue + dragWidth/2 - containerOffset)*100/containerWidth+'%';\r\n\r\n                $('.draggable').css('left', widthValue).on(\"mouseup vmouseup\", function() {\r\n                    $(this).removeClass('draggable');\r\n                    resizeElement.removeClass('resizable');\r\n                });\r\n\r\n                $('.resizable').css('width', widthValue);\r\n\r\n                updateLabel(labelResizeElement, resizeElement, 'left');\r\n                updateLabel(labelContainer, resizeElement, 'right');\r\n\r\n            }).on(\"mouseup vmouseup\", function(e){\r\n                dragElement.removeClass('draggable');\r\n                resizeElement.removeClass('resizable');\r\n            });\r\n            e.preventDefault();\r\n        }).on(\"mouseup vmouseup\", function(e) {\r\n            dragElement.removeClass('draggable');\r\n            resizeElement.removeClass('resizable');\r\n        });\r\n    }\r\n\r\n    function updateLabel(label, resizeElement, position) {\r\n        if(position == 'left') {\r\n            ( label.offset().left + label.outerWidth() < resizeElement.offset().left + resizeElement.outerWidth() ) ? label.removeClass('is-hidden') : label.addClass('is-hidden') ;\r\n        } else {\r\n            ( label.offset().left > resizeElement.offset().left + resizeElement.outerWidth() ) ? label.removeClass('is-hidden') : label.addClass('is-hidden') ;\r\n        }\r\n    }\r\n\r\n    $(\".quality-compare .dropdown-item[href]\").on(\"click\", function(e) {\r\n        e.preventDefault();\r\n        var src = $(this).attr(\"href\");\r\n        var isLeft = !!$(this).closest(\".quality-compare-left\").length;\r\n\r\n        $('.' + (isLeft ? \"left\" : \"right\") + '-img-compare-text').text($(this).closest(\".group-quality\").attr(\"data-heading\") + \" - \" + $(this).text());\r\n\r\n        $('.quality-compare-img-' + (isLeft ? \"left\" : \"right\")).attr(\"src\", src);\r\n    });\r\n});"],"file":"main.js"}